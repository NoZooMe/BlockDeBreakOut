03/30
インクルードはヘッダーに書いておくと、そのクラスがどのクラスに依存しているのか分かりやすくていい
そういえばヘッダーは変更するとコンパイルし直しになるんだった。それならヘッダーには必要最小限かいといて、コメントでクラス依存について言及すればいいか
とりあえずメニューをタイトルとゲーム画面に実装したけど二つバグが見つかる。まずゲームに入った時にメニューが開けなかったりボールが打てない問題。多分キーボードが悪さをしている。そして次にボールの当たり判定がおかしい問題。
この2つを解決するところから。それが終わったら次はテキストシーンを作りたい。

03/31
キーボードのupdateが2回呼ばれていたことがescape==1に引っかからなかった原因だった(奇数の時に引っかからない)。これは注意。次は当たり判定（右のブロックにあたると左のブロックが消える現象について
当たり判定も修正完了。原因はベクトルの内積の符号を考える際に2つの内積をかけて符号を確かめていたからだった。screenが大きくなったことによって桁あふれを起こしていたので、内積を計算した後にそれだけで符号に
変換するようにして桁あふれを防ぐようにした。
次、弾幕を実装したい。
弾幕実装について、BulletMgrに1を渡せば一面の弾幕が出るように、などで管理したい。カウントはGameSceneなどが持ち、それを参照してBulletMgrも出す弾を決める。
今実装しているクラスでは、AbstractBulletをCircleObjectに継承させて作ったので四角い弾幕などが作れない。本来はAbstractObjectのようなクラスを作り、そこにCircleクラスやCircleCollisionクラスをコンポジションさせるのがいいかなぁと思う。

04/01
CircleObjectのDrawを色白に固定したことで変更しなきゃいけないとこ多すぎる。柔軟性の無い実装は避けるように。
PlayerStatusクラスを作ってPlayerに持たせたら管理楽そう。
よくよく考えたら、絶対にStageの流れとかはStage1Sceneみたいなものが持っていたほうが良いよな。今のままだとBulletMgrやBlockMgrが個別に持つことになるので、それらを持つStageSceneを作るような設計にしたい。
弾20個、playerの方に飛ばしてくださいとStageSceneがBulletMgrにお願いする。いつやるかなどはStageSceneがcntを持ってそれで管理。ColMgrにplayerとblockを渡して当たり判定しといてくださいもStageSceneの仕事。
ColMgr.checkPlayerandBlockみたいな感じ？ColMgrのコンストラクタにplayerをいれといて、StageSceneでインスタンス化して、当たった時はColMrgからplayerに連絡してもらう？
当たり判定を実装したいときは、GameSceneにObjectを追加してさらにColMgrにも引数としてそのObjectを渡す。
PlayerはGameSceneでインスタンス化する。ただ、Updateはその下のStageSceneUpdateで行わせる。
GameSceneの中でTextScene1、StageScene1と遷移させる。
とりあえずGameMgrの解体案を考える。ColMgrがどこまで面倒を見るべきなのか。
例えばColMgrの中で、当たり判定を見るCheckCol関数とそれを見てPlayerやBallを動かすControll関数は分けて作り、そこで操作するか。
次にGameMgrがする仕事は、ボールの落下やクリア判定など。GameMgrからクリアが返ってくれば(ClearChecker関数などを作って)StageSceneがGameSceneにSceneChangeを頼む。
BlockMgrやBulletMgrはそれぞれのBlockやBulletの情報が入ったVectorを返り値とするUpdate関数やらGet関数を持てばいい？　だとしたらやっぱりGameMgrがいらない気がする。
各StageSceneがBallやPlayerやBlockMgrを持てばいい。その上でAbstractStageSceneが基本的な処理を全部入れて、各stageごとに個別に決まる流れはstageSequence関数か何かでoverrideさせて各々で書けばいいかな？
それでGameSceneの中でAbstractStageScene->stageSequenceなどでポリモーフィズムで実装すればいいかな。
部品の再利用性とかを考えればGameMgrとして独立にもろもろやってくれるのは楽な気もするけど一長一短かなぁ。

04/02

04/07
GameSceneは各オブジェクトとBlockGameMgrを持つ。オブジェクトのupdate、drawなどは全てBlockGameMgrに任せる。インスタンスの生成などは、MgrからSceneにコールバックするインターフェイスを用意する。
ブロック崩しは全てMgrで行われ、GameSceneはBlockやBulletの追加などのゲームのもう一つ大きな流れを担当する。
例えば、最初にどこにブロックがボールが配置されるかなどはGameSceneの担当である。BlockGameMgrはブロック崩しのシステムのみ(当たり判定、画面外判定、死亡通知、クリア通知など)を管理する。
通知が来た場合は、通知に合わせて、Sceneが適切な処理を行う(ここら辺の、例えば画面外判定はMgrの仕事だが、死亡通知もMgrの仕事かと言われると怪しい。今回は死亡、クリアの判定はブロック崩し特有なので、
Mgrで管理するとする。Mgrの担当がブロック崩しで、Sceneの担当はBlockdeBreakOut!固有のシステムだと考えると分かりやすいのだろうか？)。
SceneのUpdate部では、オブジェクトのUpdateとBlockGameMgrのUpdateを個別で実行する。(BlockGameMgrは各オブジェクトのUpdateを実行しない)今後、ブロック崩しの後にアドベンチャーゲームモードに移行するとか
なった場合、こっちの方がいい気がする……。
↑そうじゃないな。Init、Update、Draw、Finalizeまで全部BlockGameMgrに任せるのが良い。そしてSceneが遷移するときに必要になればBlockGameMgrからSceneが必要な情報を吸い上げるようなシステムにすべき。
ブロック崩しをしているときのPlayerとアドベンチャーゲームの時のPlayerは別インスタンスである。

04/08
GameMgrがインスタンスを作成するのは危険だと思って上にコールバックするインターフェイスを作ったけど、よく考えればshared_ptrを渡された時点でresetも代入もやりたい放題だった。
完全なカプセル化を目指すならそもそもGameMgrの関数は全てconstとなるわけで……。それは余りにも非現実的なのでGameMgrにresetなども任せることにした。インターフェースってなんだ……？
と思ったけどsceneChaneの場合はそもそも自分は他のシーンのことを全くしらないわけで……。
そもそもこのGameMgrとStageSceneの分離自体がとても変なことをしているというか、やっぱりStageSceneはplayerやballのことは知らなくていいのでは？ BlockMgrとBulletMgrの情報しか必要ないのでは？？？？？
1週間近くも何をしているんだ？？？ 新しい要素を足したいなら変化が必要な部分のみを切り取って別で考えればいいじゃないか。
何とか作業を復旧できた。危なかった。これでやっとBulletMgrやStageについて取り組める。というか継承のときなんで個別にアクセス指定子つけねばならんのだ！？
bulletには、種類、位置(ベクトル)、方向（ベクトル）、早さ、の5種類くらい渡せればいいかな？

04/09
BulletMgrとBulletの制作に取り組んでいく。弾の動きは内部カウンタによって実装。次はShotSin関数から。

04/10
とりあえず試作としてShotSin関数を作ったので実際に動作を確かめてみる。画面外に行ったら自身を消す関数なども実装。
shot関数を呼ぶのはupdateではなくinitかなぁ。

04/12
BulletMgrに弾を登録する関数を追加して、それをStageSceneから呼び出すことで弾を射出させる。
sinの挙動がおかしい……。あと弾を射出する角度も少しずれてる。ここら辺を修正していこう。
後は当たり判定、弾の画面外処理へ。
よく考えたらplayerはGameSceneが持つのが妥当かも。まぁこれはおいおい。playerをGameSceneが持つのか、パラメータをステージが変化するごとに持ち越して新しく作り直すのか……。作り直すのが良い気もするな。
あと衝突ってよく考えたら角度を反転させるのでいいのかも。そこらへんもおいおい考えないといけないなぁ。
Sin関数の軌道がおかしい。弾幕の画面外処理が出来ていない(BulletMgrがインターフェースを通じてBulletのスマートポインタをリセットしているが、それがうまくいっていない)。

04/13
bulletの画面外処理は終了。次はsin関数の軌道と当たり判定。これはBlockMgrでやっていることを参考にする。
ColMgrの独立、GameMgrは各オブジェクトのフラグを知らなくていいようにする。
Sin関数の軌道を修正。Sin関数の動きをさせるなら接線方向はCosベクトルにしなければいけなかった。それを用いて修正。
BulletとPlayerの当たり判定を実装し無敵時間も実装。そろそろステージの実装や、Ballの角度を変えるシステムを導入してもいいかもしれない(ペチン！とアタックする、的な)。
各管理部のInitialize, Finalize部も考えないといけない。cntを進めたくない場合、Finalizeでいったん保存して、Initializeでまた読み込み直すみたいなことをしないといけなさそう。

04/14
Playerの角度を変えてアタックするシステムを実装していく。

04/19
角度を変えて描写することがDrawBox関数のままじゃできない感じだったので、実際にパドルの素材を作ってそれを描画する機構を作る。

04/23
とりあえずimageクラスは作成したので次はそれを使って実際に表示する。

04/24
そもそも全ウィンドウサイズに対応する必要なんてないのでは？
16×160のサイズでPlayerを取り敢えず作る。
全3面構成でいこう。

05/03
画像ハンドルを引数に取るDraw関数をTaskに作成。RectangleObjectには空の関数として実装した。そもそもよく考えたら画像ハンドルを取るDraw関数はShapeObjectで共通な気がするのでそっちで実装する。
とりあえず表示はできたので、imageクラスの中身を確認しておく。あとPlayerの画像描く。

05/04
与えられた座標を真ん中として描画するため、Draw関数には最初から真ん中の座標を渡す必要がある。Draw関数を形依存にしているから起こることで、それで全て計算してしまっているため難しい。
Draw関数に渡す引数に座標を付け足すことで解決させるか……。
今、ゲームの中では完全にplayerを長方形と認識しており、playerのpositionベクトルはplayerの左上の座標を、中心座標を取りたい時はその座標にwidth/2とheight/2を足して取得している。
これを変更するということは、playerの中心座標を扱う全ての処理に影響を及ぼすということになる。うーん、どうしようかな……。
Circleのときは中心座標を指すから、これは明らかなミスなのだけれど……。今更変えると処理が大変なことになる気もする。
Segmentにpositionの座標を左上の座標として渡しているから修正するならここも修正する必要あり。
長方形だけpositionの座標左上にするのでいい気がしてきた……。とりあえず書いておく。
後は、衝突した後の判定を少し変更する。
……そもそも回転させたら衝突判定も全て作り直しでは？　これはちょっと……、今回は回転、実装見送るか？
見送り！
とりあえず弾の軌道を少し見直す。←今のままで十分でした。
次にBlockの位置を調整。あと、どっちみち弾の反射は少しランダム性を持たせたいのでそれも考える。
角度を変えるとDrawは反映してくれるので面白いと思うんだけど……。playerの角度が90の時だけ別で当たり判定をGameMgrで実装してもいいかも。まぁなんか色々考えておく。
いよいよステージ1の中身を考えるか……。
大きくみてまだ未実装なのはアイテム(パラメータも)と会話パート。まぁこれらは独立性高いのでおいおい。

05/05
なんでこんな仕様にしたのか知らないが、弾幕を打ち出す時に方向を指定する引数はそこへのpositionを取るようになっている。これ方向というか角度に修正すべきだと思う。
45度に飛ばしたかったら射出点＋(1, 1)って指定しなきゃいけないのだるすぎる。
角度を指定するに修正。あと、弾はブロックに当てたら消えるようにしたいけどまぁそれもおいおい。
どう考えても大きさをenumで作った方が分かりやすいのでAbstractBulletを普通のBulletに。
少し作ってみた感じ、ブロックの数はそんなに多くなくていいし、画面真ん中でずっと動いていたいので画面端のブロックは無くすか、できるだけ自在に弾を動かせるようにしたい。
地下牢で、上に脱獄することにしよう。加速度の実装を考える。
三列くらいにして間を大きく空けるか。
バランス考えもんだなぁ……。もう少し自在にボールを動かせるようにしてもいいかも……？
自機狙いの弾幕の射出点を少し上に取ってみる。
少しずつ出来てきた。
次、音の実装でもしようかな。

05/07
ChatGPTに角度が付いた壁との判定を教えてもらったのでそれを実装でも。ballに当たり判定先のsegmentの情報を入れる必要がある。まずballのほうで関数を実装してから、GameMgrにballに渡す関数を実装。

05/10
角度の付いた壁にも対応できる衝突判定を実装。ここからGameMgrの責務を各インスタンスに分離、また矩形クラスのUpdateを変更してPlayerやBlockに角度を付けられるようにする。
GameMgrの具体的な分離に関しては、当たり判定をColMgr、ゲームのリスタート、クリア等に関してはStageSceneにIFを追加してそれ越しに行う。
保持するならスマートポインタ、引数で参照するだけならT*で使い分ける。
また、GameMgr内のDrawのような、最初から引数が決まっていてnullptrを許さないような設計なら参照渡し(const T&)でOk。またUpdate部でもnullを許さないならT&でOk。
角度を変える操作も完了！ ChatGpt有能すぎる。

05/11
リソース管理部を追加する。後、ステージシーンのシーケンスも管理したいけど今日はリソース管理追加に留めておいた方が流石に良いか……。

05/18
ステージスクリプトをJSONで管理できるように変更。次はPlayerのStatusを作る。